{"version":3,"sources":["GetWeb3.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","props","connectWeb3","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","Pixatar","networks","contract","Contract","abi","address","methods","totalSupply","call","setState","alert","error","mint","pixatar","state","send","from","once","receipt","pixatars","this","i","newPixatar","className","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","key","style","backgroundColor","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1802b56.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:7545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from 'react';\r\nimport getWeb3 from './GetWeb3'\r\nimport Pixatar from './contracts/Pixatar.json'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  async componentDidMount() {\r\n    await this.connectWeb3()\r\n    //await this.loadBlockChainData()\r\n  }\r\n\r\n  connectWeb3 = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n      console.log(\"accounts:\", accounts);\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      console.log(\"network:\", networkId);\r\n      const deployedNetwork = Pixatar.networks[networkId];\r\n      const contract = new web3.eth.Contract(\r\n        Pixatar.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n      console.log(\"contract:\",contract)\r\n\r\n      // Get total supply\r\n      const totalSupply = await contract.methods.totalSupply.call()\r\n      console.log(\"total supply:\",totalSupply)\r\n\r\n      // Set accounts, contract, and total supply to the state\r\n      this.setState({ accounts: accounts, contract: contract, totalSupply: totalSupply });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  async loadBlockChainData() {\r\n    try{\r\n      //Load Pixatars\r\n      for (var i = 1; i< this.state.totalSupply; i++){\r\n        const newPixatar = await this.contract.methods.pixatars(i-1).call()\r\n        this.setState({\r\n          pixatars: [...this.state.pixatars,newPixatar]\r\n        })\r\n      }\r\n    } catch (error) {\r\n      alert (\r\n        'Error Loading Blockchain data'\r\n      )\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  mint = (pixatar) => {\r\n    console.log(pixatar)\r\n    this.state.contract.methods.mint(pixatar).send({ from: this.state.accounts[0] })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({\r\n        pixatars: [...this.state.pixatars, pixatar]\r\n      })\r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      accounts: null,\r\n      contract: null,\r\n      totalSupply: 0,\r\n      pixatars: []\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n            Pixatar\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              <small className=\"text-white\"><span id=\"account\"></span></small>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <h1>MINT</h1>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const pixatar = this.pixatar.value\r\n                  this.mint(pixatar)\r\n                }}>\r\n                  <input\r\n                    type='text'\r\n                    className='form-control mb-1'\r\n                    placeholder='e.g. #FFFFFF'\r\n                    ref={(input) => { this.pixatar = input }}\r\n                  />\r\n                  <input\r\n                    type='submit'\r\n                    className='btn btn-block btn-primary'\r\n                    value='MINT'\r\n                  />\r\n                </form>\r\n              </div>\r\n            </main>\r\n          </div>\r\n          <hr/>\r\n          <div className=\"row text-center\">\r\n            { this.state.pixatars.map((pixatar, key) => {\r\n              return(\r\n                <div key={key} className=\"col-md-3 mb-3\">\r\n                  <div className=\"token\" style={{ backgroundColor: pixatar }}></div>\r\n                  <div>{pixatar}</div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n  \r\n\r\n"],"sourceRoot":""}